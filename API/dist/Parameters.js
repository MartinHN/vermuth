var __decorate = (this && this.__decorate) || function(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") { r = Reflect.decorate(decorators, target, key, desc); } else { for (var i = decorators.length - 1; i >= 0; i--) { if (d = decorators[i]) { r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r; } } }
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const EventEmitter = require("events");
function uuidv4() {
    return "xxxx".replace(/[xy]/g, function(c) {
        var r = Math.random() * 16 | 0, v = c == "x" ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}
class GenericNodePoint {
    constructor(_name) {
        this._name = _name;
        this.uid = uuidv4();
        this.events = new EventEmitter();
    }
    get name() {
        return this._name;
    }
    set name(n) {
        this._name = n;
        this.events.emit("nameChanged", this);
    }
    computePath() {
        const path = [this.name];
        let i = this.parentContainer;
        while (i) {
            path.push(i.name);
            i = i.parentContainer;
        }
        path.reverse();
        return path;
    }
    computeAddress() {
        return "/" + this.computePath().join("/");
    }
    stringId() { return "" + this.name + "(" + this.uid + ")"; }
    setParentInternal() { }
    setParentContainer(p) {
        console.log("setting Node Parent", p.stringId(), "to", this.stringId());
        this.parentContainer = p;
        this.setParentInternal();
    }
}
class GenericParameter extends GenericNodePoint {
    constructor(name) {
        super(name);
    }
    get() {
        return this._value;
    }
    set(v, notifier = undefined) {
        console.log("setting p value", this.stringId());
        this._value = v;
        if (this.parentContainer) {
            this.parentContainer.notifyChildChanged(this);
        }
        this.events.emit("valueChanged", this, notifier);
    }
    setParentInternal() {
        console.log("set parameter parent", this.parentContainer.stringId(), "to", this.stringId());
    }
}
class ParameterContainer extends GenericNodePoint {
    constructor(name) {
        super(name);
        this.parameterContainers = {};
        this.parameters = {};
        this.feedbackListeners = new Array();
        this.hierarchyListeners = new Array();
    }
    addParameter(p) {
        this.parameters[p.name] = p;
        p.setParentContainer(this);
        return p;
    }
    removeParameter(p) {
        p.setParentContainer(undefined);
        delete this.parameters[p.name];
        this.events.emit("parameterRemoved", this);
        return p;
    }
    addParameterContainer(p) {
        this.parameterContainers[p.name] = p;
        p.setParentContainer(this);
        this.events.emit("parameterContainerAdded", this);
        return p;
    }
    removeParameterContainer(p) {
        p.setParentContainer(undefined);
        this.parameterContainers[p.name] = p;
        this.events.emit("parameterContainerRemoved", this);
        return p;
    }
    notifyChildChanged(p) {
        let notified = this;
        while (notified) {
            for (const f of notified.feedbackListeners) {
                f.parameterChanged(this, p);
            }
            notified = notified.parentContainer;
        }
    }
}
class Parameter extends GenericParameter {
}
// type ParameterContainerHierarchyListener = ParameterContainerHierarchyListenerI<ParameterContainer,Parameter>
//
// {
//    parameterAdded( pc: ParameterContainer, p: Parameter) {};
//    parameterRemoved( pc: ParameterContainer, p: Parameter) {};
//    parameterContainerAdded( pc: ParameterContainer, p: Parameter) {};
//    parameterContainerRemoved( pc: ParameterContainer, p: Parameter) {};
// }
///////////////////////
// DECORATORS
///////////////////////
function BindParameter(...args) {
    return function(target, key) {
        if (!target.staticParams) {
            target.staticParams = {};
        }
        target.staticParams[key] = args;
    };
}
function BindParameterContainer(...args) {
    return function(target, key) {
        if (!target.staticParamConts) {
            target.staticParamConts = {};
        }
        target.staticParamConts[key] = args;
    };
}
function BindContainer() {
    return function(constructor) {
        console.log("eval const");
        return class extends constructor {
            constructor(...args) {
                super(...args);
                console.log("try to bound static");
                const checkName = (pn) => {
                    if (!("" + this[pn].name in [pn, ""])) {
                        this[pn].name = pn;
                        console.error("renaming Node to its key name");
                    }
                };
                if (this.staticParams) {
                    for (const pn of Object.keys(this.staticParams)) {
                        if (!this[pn]) {
                            console.log("creating param ", pn);
                            this[pn] = new Parameter(pn);
                        } else {
                            checkName(pn);
                        }
                        this.addParameter(this[pn]);
                    }
                }
                if (this.staticParamConts) {
                    for (const pn of Object.keys(this.staticParamConts)) {
                        if (!this[pn]) {
                            console.log("creating param ", pn);
                            this[pn] = new ParameterContainer(pn);
                        } else {
                            checkName(pn);
                        }
                        this.addParameterContainer(this[pn]);
                    }
                }
            }
        };
    };
}
//////////////////////////
// TEST
/////////////////////////
let RootCont = class RootCont extends ParameterContainer {
    constructor() {
        super("pCont");
        this.subCont = new ParameterContainer("lkj");
    }
};
__decorate([
    BindParameter(),
], RootCont.prototype, "num", void 0);
__decorate([
    BindParameterContainer(),
], RootCont.prototype, "subCont", void 0);
RootCont = __decorate([
    BindContainer(),
], RootCont);
console.log("instanciate");
const cont = new RootCont();
function S(o) {
    const res = [];
    for (const a in o) {
        res.push([a, o[a]]);
    }
    return res;
    // return Object.keys(o);
    // return JSON.stringify(o);
}
console.log(S(cont));
console.log("setting");
cont.num.set(6);
console.log(cont.num.computeAddress());
//# sourceMappingURL=data:application/json;base64,
